@page "/tareas"
@inject GestionTareas.Services.ITareaService tareaService
@inject IJSRuntime JSRuntime
@using GestionTareas.Models
@implements IDisposable

<h3>Gestión de Tareas</h3>

<button @onclick="ShowAddTaskForm">Añadir Nueva Tarea</button>

@if (showAddTaskForm || selectedTask != null)
{
    <EditForm Model="Model" OnValidSubmit="SaveTask">
        <DataAnnotationsValidator />
        <div>
            <label>Nombre:</label>
            <InputText @bind-Value="Model.Name" />
            <ValidationMessage For="() => Model.Name" />
        </div>
        <div>
            <label>Descripción:</label>
            <InputTextArea @bind-Value="Model.Description" />
        </div>
        <div>
            <label>Estado:</label>
            <InputSelect @bind-Value="Model.Status">
                @foreach (var status in Enum.GetValues(typeof(EstadoTareas)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
        <div>
            <label>Bloqueada:</label>
            <InputCheckbox @bind-Value="Model.IsBlocked" />
        </div>
        <button type="submit">Guardar</button>
        <button type="button" @onclick="CancelTask">Cancelar</button>
    </EditForm>
}

<div @ref="scrollContainer" style="overflow-y: auto; height: 80vh;" @onscroll="OnScroll">
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Estado</th>
                <th>Bloqueada</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tarea in tareas)
            {
                <tr>
                    <td>@tarea.Name</td>
                    <td>@tarea.Description</td>
                    <td>@tarea.Status</td>
                    <td>@tarea.IsBlocked</td>
                    <td>
                        <button @onclick="() => EditTask(tarea.Id)">Editar</button>
                        <button @onclick="() => DeleteTask(tarea.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<TareaItem> tareas = new();
    private TareaItem Model = new();
    private TareaItem selectedTask = null;
    private bool showAddTaskForm = false;
    private int currentPage = 1;
    private const int pageSize = 100;
    private ElementReference scrollContainer;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadMoreItems();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing component: {ex.Message}");
        }
    }

    private void ShowAddTaskForm()
    {
        showAddTaskForm = true;
        Model = new TareaItem();
    }

    private void CancelTask()
    {
        showAddTaskForm = false;
        selectedTask = null;
        Model = new TareaItem();
    }

    private async Task SaveTask()
    {
        try
        {
            if (Model.Id == 0)
            {
                await tareaService.AddTaskAsync(Model);
            }
            else
            {
                await tareaService.UpdateTaskAsync(Model);
            }

            tareas = await tareaService.GetTasksAsync(1, tareas.Count); // Reload all tasks
            showAddTaskForm = false;
            selectedTask = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving task: {ex.Message}");
        }
    }

    private async Task LoadMoreItems()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            var tareasNuevas = await tareaService.GetTasksAsync(currentPage, pageSize);
            if (tareasNuevas.Any())
            {
                tareas.AddRange(tareasNuevas);
                currentPage++;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading more items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnScroll()
    {
        try
        {
            var scrollPosition = await JSRuntime.InvokeAsync<double>("getScrollPosition", scrollContainer);
            var clientHeight = await JSRuntime.InvokeAsync<double>("getClientHeight", scrollContainer);
            var scrollHeight = await JSRuntime.InvokeAsync<double>("getScrollHeight", scrollContainer);

            if (scrollPosition + clientHeight >= scrollHeight - 10)
            {
                await LoadMoreItems();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error on scroll: {ex.Message}");
        }
    }

    private async Task EditTask(int id)
    {
        try
        {
            selectedTask = await tareaService.GetTaskByIdAsync(id);
            if (selectedTask != null)
            {
                Model = selectedTask;
                showAddTaskForm = true;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error editing task: {ex.Message}");
        }
    }

    private async Task DeleteTask(int id)
    {
        try
        {
            await tareaService.DeleteTaskAsync(id);
            tareas = await tareaService.GetTasksAsync(1, tareas.Count);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Clean up resources if needed
    }
}
